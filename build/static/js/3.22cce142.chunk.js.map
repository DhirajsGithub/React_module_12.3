{"version":3,"sources":["components/quotes/QuoteItem.module.css","components/quotes/QuoteList.module.css","components/quotes/NoQuotesFound.module.css","components/quotes/QuoteItem.js","components/quotes/QuoteList.js","components/quotes/NoQuotesFound.js","Pages/AllQuotes.js"],"names":["module","exports","QuoteItem","props","className","classes","item","text","author","to","id","QuoteList","navigate","useNavigate","location","useLocation","console","log","quotes","ascending","isSortingAscending","URLSearchParams","search","get","sortedQuotes","sort","quoteA","quoteB","sorting","onClick","pathname","push","list","map","quote","NoQuotesFound","noquotes","AllQuotes","useHttp","getAllQuotes","sendRequest","status","loadedQuotes","data","error","useEffect","LoadingSpinner","length"],"mappings":"sHACAA,EAAOC,QAAU,CAAC,KAAO,0B,mBCAzBD,EAAOC,QAAU,CAAC,KAAO,wBAAwB,QAAU,6B,mBCA3DD,EAAOC,QAAU,CAAC,SAAW,kC,wFCkBdC,EAhBG,SAACC,GACjB,OACE,qBAAIC,UAAWC,IAAQC,KAAvB,UACE,mCACE,qCACE,4BAAIH,EAAMI,SAEZ,qCAAaJ,EAAMK,YAErB,cAAC,IAAD,CAAMC,GAAE,kBAAaN,EAAMO,IAAMN,UAAU,MAA3C,iC,iBCkDSO,EA9CG,SAACR,GAGjB,IAAMS,EAAWC,cACXC,EAAWC,cACjBC,QAAQC,IAAIH,GAEZ,IAjBkBI,EAAQC,EAkBpBC,EAAiD,QADnC,IAAIC,gBAAgBP,EAASQ,QACVC,IAAI,QAErCC,GApBYN,EAoBcf,EAAMe,OApBZC,EAoBoBC,EAnBvCF,EAAOO,MAAK,SAACC,EAAQC,GAC1B,OAAIR,EACKO,EAAOhB,GAAKiB,EAAOjB,GAAK,GAAK,EAE7BgB,EAAOhB,GAAKiB,EAAOjB,GAAK,GAAK,MAiBxCM,QAAQC,IAAIH,GAcZ,OACE,eAAC,WAAD,WACA,qBAAKV,UAAWC,IAAQuB,QAAxB,SACE,yBAAQC,QAhBiB,WAQ3BjB,EAAS,CACPkB,SAAWhB,EAASgB,SACpBR,OAAM,gBAAaF,EAAqB,OAAS,QAChD,CAACW,MAAM,KAKR,kBAA6CX,EAAqB,aAAe,iBAGjF,oBAAIhB,UAAWC,IAAQ2B,KAAvB,SACGR,EAAaS,KAAI,SAACC,GAAD,OAChB,cAAC,EAAD,CAEExB,GAAIwB,EAAMxB,GACVF,OAAQ0B,EAAM1B,OACdD,KAAM2B,EAAM3B,MAHP2B,EAAMxB,a,wCCrCRyB,EAXO,WACpB,OACE,sBAAK/B,UAAWC,IAAQ+B,SAAxB,UACE,iDACA,cAAC,IAAD,CAAMhC,UAAU,MAAMK,GAAG,aAAzB,6BC4BS4B,UAxBG,WAChB,MAA0DC,YACxDC,KAAc,GADRC,EAAR,EAAQA,YAAaC,EAArB,EAAqBA,OAAcC,EAAnC,EAA6BC,KAA7B,EAAiDC,MAMjD,OAHAC,qBAAU,WACRL,MACC,CAACA,IACU,YAAXC,EACM,8BACL,cAACK,EAAA,EAAD,MAMU,cAAXL,GAA4BC,GAAsC,IAAtBA,EAAaK,OAK1D,aADA,CACC,EAAD,CAAW7B,OAAQwB,IAJZ,cAAC,EAAD","file":"static/js/3.22cce142.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"QuoteItem_item__2dOvb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"QuoteList_list__3pzcl\",\"sorting\":\"QuoteList_sorting__rL6H1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"noquotes\":\"NoQuotesFound_noquotes__3DIYb\"};","import { Link } from 'react-router-dom';\nimport classes from './QuoteItem.module.css';\n\nconst QuoteItem = (props) => {\n  return (\n    <li className={classes.item}>\n      <figure>\n        <blockquote>\n          <p>{props.text}</p>\n        </blockquote>\n        <figcaption>{props.author}</figcaption>\n      </figure>\n      <Link to={`/quotes/${props.id}`} className='btn'>\n        View Fullscreen\n      </Link>\n    </li>\n  );\n};\n\nexport default QuoteItem;\n","import { Fragment } from 'react';\nimport { useHistory, useNavigate, useLocation, useRouteMatch } from 'react-router-dom';\n\nimport QuoteItem from './QuoteItem';\nimport classes from './QuoteList.module.css';\n\nconst sortQuotes = (quotes, ascending) => {\n  return quotes.sort((quoteA, quoteB) => {\n    if (ascending) {\n      return quoteA.id > quoteB.id ? 1 : -1;\n    } else {\n      return quoteA.id < quoteB.id ? 1 : -1;\n    }\n  });\n};\n\nconst QuoteList = (props) => {\n  // const match = useRouteMatch();\n  // const history = useHistory();\n  const navigate = useNavigate();\n  const location = useLocation();\n  console.log(location);\n\n  const queryParams = new URLSearchParams(location.search);\n  const isSortingAscending = queryParams.get('sort') === 'asc';\n\n  const sortedQuotes = sortQuotes(props.quotes, isSortingAscending);\n\n  console.log(location);\n  const changeSortingHandler = ()=>{\n    // history.push(\"/quotes?sort=\"+ (isSortingAscending ? 'desc' : 'asc'));\n    // history.push(`${location.pathname}?sort=${(isSortingAscending ? 'desc' : 'asc')}`);\n    // much cleaner approach, pathname to pathname key and query parameter to search key \n    // history.push({\n    //   pathname : location.pathname,\n    //   search : `?sort=${(isSortingAscending ? 'desc' : 'asc')}`,\n    // })\n    navigate({\n      pathname : location.pathname,\n      search : `?sort=${(isSortingAscending ? 'desc' : 'asc')}`,\n    }, {push: true})\n  }\n  return (\n    <Fragment>\n    <div className={classes.sorting}>\n      <button onClick={changeSortingHandler}>Sort {isSortingAscending ? 'Descending' : 'Ascending'}</button>\n      {/* NOTE: whatever written in double quotes will be treated as html inner html */}\n    </div>\n      <ul className={classes.list}>\n        {sortedQuotes.map((quote) => (\n          <QuoteItem\n            key={quote.id}\n            id={quote.id}\n            author={quote.author}\n            text={quote.text}\n          />\n        ))}\n      </ul>\n    </Fragment>\n  );\n};\n\nexport default QuoteList;\n","import { Link } from 'react-router-dom';\nimport classes from './NoQuotesFound.module.css';\n\nconst NoQuotesFound = () => {\n  return (\n    <div className={classes.noquotes}>\n      <p>No quotes found!</p>\n      <Link className='btn' to=\"/new-quote\">\n        Add a Quote\n      </Link>\n    </div>\n  );\n};\n\nexport default NoQuotesFound;\n","import React, { useEffect } from 'react'\nimport QuoteList from \"../components/quotes/QuoteList\"\nimport { getAllQuotes } from '../components/lib/api';\nimport useHttp from '../components/hooks/use-http';\nimport LoadingSpinner from '../components/UI/LoadingSpinner';\nimport NoQuotesFound from \"../components/quotes/NoQuotesFound\";\nconst DUMMY_QUOTES = [\n  { id: 'q1', author: 'Max', text: 'Learning React is fun!' },\n  { id: 'q2', author: 'Maximilian', text: 'Learning React is great!' },\n];\n\nconst AllQuotes = () => {\n  const { sendRequest, status, data: loadedQuotes, error} = useHttp(\n    getAllQuotes, true\n  )\n  useEffect(()=>{\n    sendRequest();\n  }, [sendRequest])\n  if(status === 'pending'){\n    return <div>\n      <LoadingSpinner/>\n    </div>\n  }\n  if(error){\n    <p className='centered focused'>{error}</p>\n  }\n  if(status === 'completed' && (!loadedQuotes || loadedQuotes.length===0)){\n    return <NoQuotesFound />\n  }\n  return (\n    // <QuoteList quotes={DUMMY_QUOTES} />\n    <QuoteList quotes={loadedQuotes} />\n  )\n}\n\nexport default AllQuotes;"],"sourceRoot":""}